<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Flttx&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://flttx.github.io/"/>
  <updated>2020-08-03T08:27:01.381Z</updated>
  <id>https://flttx.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React知识点</title>
    <link href="https://flttx.github.io/2020/08/03/React%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://flttx.github.io/2020/08/03/React知识点/</id>
    <published>2020-08-03T07:54:31.000Z</published>
    <updated>2020-08-03T08:27:01.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、React生命周期有哪些，16版本生命周期发生了哪些变化？"><a href="#1、React生命周期有哪些，16版本生命周期发生了哪些变化？" class="headerlink" title="1、React生命周期有哪些，16版本生命周期发生了哪些变化？"></a>1、React生命周期有哪些，16版本生命周期发生了哪些变化？</h1><h2 id="15生命周期"><a href="#15生命周期" class="headerlink" title="15生命周期"></a>15生命周期</h2><ul><li>初始化阶段<ul><li>constructor 构造函数</li><li>getDefaultPropsprops默认值</li><li>getInitialStatestate默认值</li></ul></li><li>挂载阶段<ul><li>componentWillMount 组件初始化渲染前调用</li><li>render 组件渲染</li><li>componentDidMount组件挂载到 DOM后调用</li></ul></li><li>更新阶段<ul><li>componentWillReceiveProps 组件将要接收新 props前调用</li><li>shouldComponentUpdate 组件是否需要更新</li><li>componentWillUpdate 组件更新前调用</li><li>render 组件渲染</li><li>componentDidUpdate 组件更新后调用</li></ul></li><li>卸载阶段<ul><li>componentWillUnmount 组件卸载前调用</li></ul></li></ul><h2 id="16生命周期"><a href="#16生命周期" class="headerlink" title="16生命周期"></a>16生命周期</h2><ul><li>初始化阶段<ul><li>constructor 构造函数</li><li>getDefaultPropsprops默认值</li><li>getInitialStatestate默认值</li></ul></li><li><p>挂载阶段</p><ul><li>static getDerivedStateFromProps(props,state)</li><li>render</li><li><p>componentDidMount</p><p>getDerivedStateFromProps：组件每次被 rerender的时候，包括在组件构建之后(虚拟 dom之后，实际 dom挂载之前)，每次获取新的 props或 state之后；每次接收新的props之后都会返回一个对象作为新的 state，返回null则说明不需要更新 state；配合 componentDidUpdate，可以覆盖 componentWillReceiveProps的所有用法。</p></li></ul></li><li><p>更新阶段</p><ul><li>static getDerivedStateFromProps(props,state)</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapshotBeforeUpdate(prevProps,prevState)</li><li><p>componentDidUpdate</p><p>getSnapshotBeforeUpdate：触发时间: update发生的时候，在 render之后，在组件 dom渲染之前；返回一个值，作为 componentDidUpdate的第三个参数；配合 componentDidUpdate, 可以覆盖 componentWillUpdate的所有用法。</p></li></ul></li><li><p>卸载阶段</p><ul><li>componentWillUnmount</li></ul></li><li><p>错误处理</p><ul><li>componentDidCatch</li></ul></li></ul><p>React16新的生命周期弃用了 componentWillMount、componentWillReceivePorps，componentWillUpdate新增了 getDerivedStateFromProps、getSnapshotBeforeUpdate来代替弃用的三个钩子函数。</p><p>React16并没有删除这三个钩子函数，但是不能和新增的钩子函数混用， React17将会删除这三个钩子函数，新增了对错误的处理（ componentDidCatch）。</p><h2 id="2、setState是同步的还是异步的？"><a href="#2、setState是同步的还是异步的？" class="headerlink" title="2、setState是同步的还是异步的？"></a>2、setState是同步的还是异步的？</h2><ul><li>生命周期和合成事件中</li></ul><p>在 React的生命周期和合成事件中， React仍然处于他的更新机制中，这时无论调用多少次 setState，都会不会立即执行更新，而是将要更新的·存入 _pendingStateQueue，将要更新的组件存入 dirtyComponent。<br>当上一次更新机制执行完毕，以生命周期为例，所有组件，即最顶层组件 didmount后会将批处理标志设置为 false。这时将取出 dirtyComponent中的组件以及 _pendingStateQueue中的 state进行更新。这样就可以确保组件不会被重新渲染多次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">this.setState(&#123;</span><br><span class="line">      index: this.state.index + 1</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&apos;state&apos;, this.state.index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以，如上面的代码，当我们在执行 setState后立即去获取 state，这时是获取不到更新后的 state的，因为处于 React的批处理机制中， state被暂存起来，待批处理机制完成之后，统一进行更新。<br>所以。setState本身并不是异步的，而是 React的批处理机制给人一种异步的假象。</p><ul><li>异步代码和原生事件中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      console.log(&apos;调用setState&apos;);</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            index: this.state.index + 1</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&apos;state&apos;, this.state.index);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>如上面的代码，当我们在异步代码中调用 setState时，根据 JavaScript的异步机制，会将异步代码先暂存，等所有同步代码执行完毕后在执行，这时 React的批处理机制已经走完，处理标志设被设置为 false，这时再调用 setState即可立即执行更新，拿到更新后的结果。<br>在原生事件中调用 setState并不会出发 React的批处理机制，所以立即能拿到最新结果。</p><ul><li>最佳实践</li></ul><p>setState的第二个参数接收一个函数，该函数会在 React的批处理机制完成之后调用，所以你想在调用 setState后立即获取更新后的值，请在该回调函数中获取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123; index: this.state.index + 1 &#125;, () =&gt; &#123;</span><br><span class="line">      console.log(this.state.index);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>链接：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NDAzMjE5NQ==&amp;mid=2247483989&amp;idx=1&amp;sn=d78f889c6e1d7d57058c9c232b1a620e&amp;chksm=ce6ec6f9f9194fef681c79ee869bf58d5413132c73496710b2eb32c859a2249a895c2ce8a7cd&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">由实际问题探究setState的执行机制</a>。</p><h1 id="3、为什么有时连续多次setState只有一次生效？"><a href="#3、为什么有时连续多次setState只有一次生效？" class="headerlink" title="3、为什么有时连续多次setState只有一次生效？"></a>3、为什么有时连续多次setState只有一次生效？</h1><p>例如下面的代码，两次打印出的结果是相同的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    this.setState(&#123; index: this.state.index + 1 &#125;, () =&gt; &#123;</span><br><span class="line">        console.log(this.state.index);</span><br><span class="line">    &#125;)</span><br><span class="line">    this.setState(&#123; index: this.state.index + 1 &#125;, () =&gt; &#123;</span><br><span class="line">        console.log(this.state.index);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原因就是 React会批处理机制中存储的多个 setState进行合并，来看下 React源码中的 _assign函数，类似于 Object的 assign：<br>如果传入的是对象，很明显会被合并成一次，所以上面的代码两次打印的结果是相同的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.assign( </span><br><span class="line">  nextState,</span><br><span class="line">&#123;index: state.index+ 1&#125;,</span><br><span class="line">&#123;index: state.index+ 1&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>注意， assign函数中对函数做了特殊处理，处理第一个参数传入的是函数，函数的参数 preState是前一次合并后的结果，所以计算结果是准确的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">    this.setState((state, props) =&gt; (&#123;</span><br><span class="line">            index: state.index + 1</span><br><span class="line">    &#125;), () =&gt; &#123; </span><br><span class="line">        console.log(this.state.index);</span><br><span class="line">    &#125;)</span><br><span class="line">    this.setState((state, props) =&gt; (&#123;</span><br><span class="line">            index: state.index + 1</span><br><span class="line">    &#125;), () =&gt; &#123;</span><br><span class="line">        console.log(this.state.index);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以上面的代码两次打印的结果是不同的。</p><ul><li>最佳实践<br>React会对多次连续的 setState进行合并，如果你想立即使用上次 setState后的结果进行下一次 setState，可以让 setState 接收一个函数而不是一个对象。这个函数用上一个 state 作为第一个参数，将此次更新被应用时的 props 做为第二个参数。</li></ul><h1 id="4、虚拟Dom比普通Dom更快吗？"><a href="#4、虚拟Dom比普通Dom更快吗？" class="headerlink" title="4、虚拟Dom比普通Dom更快吗？"></a>4、虚拟Dom比普通Dom更快吗？</h1><p>很多文章说 VitrualDom可以提升性能，这一说法实际上是很片面的。<br>直接操作 DOM是非常耗费性能的，这一点毋庸置疑。但是 React使用 VitrualDom也是无法避免操作 DOM的。<br>如果是首次渲染， VitrualDom不具有任何优势，甚至它要进行更多的计算，消耗更多的内存。<br>VitrualDom的优势在于 React的 Diff算法和批处理策略， React在页面更新之前，提前计算好了如何进行更新和渲染 DOM。实际上，这个计算过程我们在直接操作 DOM时，也是可以自己判断和实现的，但是一定会耗费非常多的精力和时间，而且往往我们自己做的是不如 React好的。所以，在这个过程中 React帮助我们”提升了性能”。<br>所以，我更倾向于说， VitrualDom帮助我们提高了开发效率，在重复渲染时它帮助我们计算如何更高效的更新，而不是它比 DOM操作更快。</p><h1 id="5、为什么代码中一定要引入React？"><a href="#5、为什么代码中一定要引入React？" class="headerlink" title="5、为什么代码中一定要引入React？"></a>5、为什么代码中一定要引入React？</h1><p>JSX只是为 React.createElement(component,props,…children)方法提供的语法糖。<br>所有的 JSX代码最后都会转换成 React.createElement(…)， Babel帮助我们完成了这个转换的过程。<br>所以使用了 JSX的代码都必须引入 React。</p><h1 id="6、为什么React组件首字母必须大写？"><a href="#6、为什么React组件首字母必须大写？" class="headerlink" title="6、为什么React组件首字母必须大写？"></a>6、为什么React组件首字母必须大写？</h1><p>babel在编译时会判断 JSX中组件的首字母，当首字母为小写时，其被认定为原生 DOM标签， createElement的第一个变量被编译为字符串；当首字母为大写时，其被认定为自定义组件， createElement的第一个变量被编译为对象。</p><h1 id="7、React在渲染真实Dom时做了哪些性能优化？"><a href="#7、React在渲染真实Dom时做了哪些性能优化？" class="headerlink" title="7、React在渲染真实Dom时做了哪些性能优化？"></a>7、React在渲染真实Dom时做了哪些性能优化？</h1><p>在 IE（8-11）和 Edge浏览器中，一个一个插入无子孙的节点，效率要远高于插入一整个序列化完整的节点树。<br>React通过 lazyTree，在 IE（8-11）和 Edge中进行单个节点依次渲染节点，而在其他浏览器中则首先将整个大的 DOM结构构建好，然后再整体插入容器。<br>并且，在单独渲染节点时， React还考虑了 fragment等特殊节点，这些节点则不会一个一个插入渲染。</p><h1 id="8、Hook有哪些优势？"><a href="#8、Hook有哪些优势？" class="headerlink" title="8、Hook有哪些优势？"></a>8、Hook有哪些优势？</h1><ul><li>减少状态逻辑复用的风险</li></ul><p>Hook和 Mixin在用法上有一定的相似之处，但是 Mixin引入的逻辑和状态是可以相互覆盖的，而多个 Hook之间互不影响，这让我们不需要在把一部分精力放在防止避免逻辑复用的冲突上。在不遵守约定的情况下使用 HOC也有可能带来一定冲突，比如 props覆盖等等，使用 Hook则可以避免这些问题。</p><ul><li>避免地狱式嵌套</li></ul><p>大量使用 HOC的情况下让我们的代码变得嵌套层级非常深，使用 HOC，我们可以实现扁平式的状态逻辑复用，而避免了大量的组件嵌套。</p><ul><li>让组件更容易理解</li></ul><p>在使用 class组件构建我们的程序时，他们各自拥有自己的状态，业务逻辑的复杂使这些组件变得越来越庞大，各个生命周期中会调用越来越多的逻辑，越来越难以维护。使用 Hook，可以让你更大限度的将公用逻辑抽离，将一个组件分割成更小的函数，而不是强制基于生命周期方法进行分割。</p><ul><li>使用函数代替class</li></ul><p>相比函数，编写一个 class可能需要掌握更多的知识，需要注意的点也越多，比如 this指向、绑定事件等等。另外，计算机理解一个 class比理解一个函数更快。Hooks让你可以在 classes之外使用更多 React的新特性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、React生命周期有哪些，16版本生命周期发生了哪些变化？&quot;&gt;&lt;a href=&quot;#1、React生命周期有哪些，16版本生命周期发生了哪些变化？&quot; class=&quot;headerlink&quot; title=&quot;1、React生命周期有哪些，16版本生命周期发生了哪些变化
      
    
    </summary>
    
      <category term="前端" scheme="https://flttx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="https://flttx.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Antv G2 4.0+技巧</title>
    <link href="https://flttx.github.io/2020/08/03/4-0-%E6%8A%80%E5%B7%A7/"/>
    <id>https://flttx.github.io/2020/08/03/4-0-技巧/</id>
    <published>2020-08-03T07:45:38.000Z</published>
    <updated>2020-08-03T07:54:53.425Z</updated>
    
    <content type="html"><![CDATA[<p>AntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践。网址：<a href="https://antv.vision/zh。" target="_blank" rel="noopener">https://antv.vision/zh。</a></p><p>G2 一套面向常规统计图表，以数据驱动的高交互可视化图形语法，具有高度的易用性和扩展性。使用 G2，你可以无需关注图表各种繁琐的实现细节，一条语句即可使用 Canvas 或 SVG 构建出各种各样的可交互的统计图表。网址：<a href="https://g2.antv.vision/zh。" target="_blank" rel="noopener">https://g2.antv.vision/zh。</a></p><h1 id="1、设置图例"><a href="#1、设置图例" class="headerlink" title="1、设置图例"></a>1、设置图例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">legend(&#123; position: &apos;top-left&apos;,</span><br><span class="line">       offsetX: 200,</span><br><span class="line">       itemName: &#123;  //设置图例文本</span><br><span class="line">         style: &#123;</span><br><span class="line">           fontSize: 14,</span><br><span class="line">           fill: &apos;#5F717D&apos;,</span><br><span class="line">           x: 22,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">       marker: &#123;  //设置图例标注样式</span><br><span class="line">         style: &#123;</span><br><span class="line">           r: 6,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>具体style属性参考：<a href="https://g2.antv.vision/zh/docs/api/interfaces/shapemarkerattrs。" target="_blank" rel="noopener">https://g2.antv.vision/zh/docs/api/interfaces/shapemarkerattrs。</a></p><h1 id="2、自定义图例点击事件，隐藏对应图形"><a href="#2、自定义图例点击事件，隐藏对应图形" class="headerlink" title="2、自定义图例点击事件，隐藏对应图形"></a>2、自定义图例点击事件，隐藏对应图形</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chartRef.current.on(&apos;legend:click&apos;, (ev: any) =&gt; &#123;</span><br><span class="line">    const &#123; unchecked, value &#125; = ev.target.cfg.delegateObject.item;</span><br><span class="line">    const geoms = chartRef.current.geometries;</span><br><span class="line">    for (let i = 0; i &lt; geoms.length; i++) &#123;</span><br><span class="line">        const geom = geoms[i];</span><br><span class="line">        if (geom.getYScale().field === value) &#123;</span><br><span class="line">            if (!unchecked) &#123;</span><br><span class="line">                geom.show();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                geom.hide();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践。网址：&lt;a href=&quot;https://antv.vision/zh。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://antv.
      
    
    </summary>
    
      <category term="前端" scheme="https://flttx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="https://flttx.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>手机端调用百度图片识别API</title>
    <link href="https://flttx.github.io/2019/08/15/%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%ABAPI/"/>
    <id>https://flttx.github.io/2019/08/15/手机端调用百度图片识别API/</id>
    <published>2019-08-15T02:09:02.000Z</published>
    <updated>2019-08-15T02:43:04.049Z</updated>
    
    <content type="html"><![CDATA[<p>因为业务需求，有车牌识别的功能，所以上网找了图片识别的解决方案，发现BAT都有，但是百度的免费次数最多，对业务来说就相当于全免费了，所以就选择了百度的API，😄。官方文档地址：<a href="https://ai.baidu.com/docs#/OCR-API/top。" target="_blank" rel="noopener">https://ai.baidu.com/docs#/OCR-API/top。</a></p><h1 id="1-拍照获取图片"><a href="#1-拍照获取图片" class="headerlink" title="1.拍照获取图片"></a>1.拍照获取图片</h1><p>项目是H5 APP，拍照用了H5+的api。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//拍照</span><br><span class="line">captureImage() &#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    var cmr = plus.camera.getCamera();</span><br><span class="line">    var res = cmr.supportedImageResolutions[0];  //摄像头支持的拍照分辨率</span><br><span class="line">    var fmt = cmr.supportedImageFormats[0]; //摄像头支持的拍照文件格式</span><br><span class="line">    cmr.captureImage((path)=&gt; &#123;</span><br><span class="line">            _this.convertUrl(path);</span><br><span class="line">        &#125;,</span><br><span class="line">        function(error) &#123;</span><br><span class="line">            console.log(&quot;Capture image failed: &quot; + error.message);</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            resolution: res,</span><br><span class="line">            format: fmt</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h1 id="2-图片转base64"><a href="#2-图片转base64" class="headerlink" title="2.图片转base64"></a>2.图片转base64</h1><p>根据官方文档，图片要转成base64数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//转换图片路径并调用方法识别</span><br><span class="line">convertUrl(path)&#123;</span><br><span class="line">    let _this = this;</span><br><span class="line">    //转换为本地文件路径</span><br><span class="line">    plus.io.resolveLocalFileSystemURL(path, function(entry) &#123;</span><br><span class="line">        var localurl = entry.toLocalURL(); </span><br><span class="line">        var reader = new plus.io.FileReader();  </span><br><span class="line">        reader.onloadend = function (e) &#123;  </span><br><span class="line">                var imgData = e.target.result.replace(&quot;data:image/jpeg;base64,&quot;, &quot;&quot;).replace(&quot;data:image/png;base64,&quot;, &quot;&quot;);//base64图片  </span><br><span class="line">                ocr.startOCR(imgData, res=&gt;&#123;</span><br><span class="line">                var number = res.words_result.number;</span><br><span class="line">                if(number.length == 7)&#123;</span><br><span class="line">                    uni.showToast(&#123;</span><br><span class="line">                        title: &quot;识别成功&quot;,</span><br><span class="line">                        icon: &quot;none&quot;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    var values = number.split(&quot;&quot;);</span><br><span class="line">                    _this.result = values;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;;  </span><br><span class="line">        reader.readAsDataURL(localurl);  </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h1 id="3-获取Access-Token"><a href="#3-获取Access-Token" class="headerlink" title="3.获取Access Token"></a>3.获取Access Token</h1><p>好了，现在图片数据有了，在调百度车牌识别API之前还要先获取Access Token,而要获取Access Token，又得先登记一个应用，取到应用的API KEY和SECRET KEY。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//获取access_token</span><br><span class="line">function requestAccessToken(callback) &#123;</span><br><span class="line">let params = &#123;</span><br><span class="line">grant_type: &apos;client_credentials&apos;,  //固定值</span><br><span class="line">client_id: api_key,  //登记应用的API KEY</span><br><span class="line">client_secret: secret_key //登记应用的SECRET KEY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //network是封装的ajax请求函数</span><br><span class="line">network.request(&apos;https://aip.baidubce.com/oauth/2.0/token&apos;, params, null, &quot;GET&quot;, res =&gt; &#123;</span><br><span class="line">if (res.hasOwnProperty(&apos;access_token&apos;)) &#123;</span><br><span class="line">let nowTime = new Date().getTime();  </span><br><span class="line">            //记录当前请求时间是为了判断access_token是否过期</span><br><span class="line">let access_token_obj = &#123;</span><br><span class="line">access_token: res.access_token,</span><br><span class="line">requestTime: nowTime  </span><br><span class="line">&#125;</span><br><span class="line">uni.setStorageSync(&quot;access_token_obj&quot;, access_token_obj)</span><br><span class="line">callback(res.access_token);</span><br><span class="line">&#125; else &#123; //获取access_token失败</span><br><span class="line">console.log(JSON.stringify(res));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-调用车牌识别API"><a href="#4-调用车牌识别API" class="headerlink" title="4.调用车牌识别API"></a>4.调用车牌识别API</h1><p>先判断之前是否请求过access_token，如果请求过再判断access_token是否过期。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 开始进行文字识别，传入base64图片数据和回调函数</span><br><span class="line"> */</span><br><span class="line">function startOCR(imgData, callback) &#123;</span><br><span class="line">console.log(&quot;开始识别...&quot;);</span><br><span class="line">console.log(&quot;access_token缓存？&quot; + uni.getStorageSync(&quot;access_token_obj&quot;));</span><br><span class="line">if (uni.getStorageSync(&quot;access_token_obj&quot;)) &#123; //如果access_token已存入缓存，表示请求过</span><br><span class="line">let obj = uni.getStorageSync(&quot;access_token_obj&quot;);</span><br><span class="line">let nowTime = new Date().getTime();</span><br><span class="line">if ((nowTime - obj.requestTime) &gt;= 1000 * 3600 * 24 * 30) &#123; //如果上次请求时间在30天之前，则需要重新获取access_token</span><br><span class="line">requestAccessToken(res =&gt; &#123;</span><br><span class="line">recognition(res, imgData, callback);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">recognition(obj.access_token, imgData, callback);</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123; //缓存中没有access_token</span><br><span class="line">requestAccessToken(res =&gt; &#123;</span><br><span class="line">recognition(res, imgData, callback);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//识别中...调用文字识别API,传入图片数据参数</span><br><span class="line">function recognition(access_token, imgData, callback) &#123;</span><br><span class="line">let params = &#123;</span><br><span class="line">access_token: access_token,</span><br><span class="line">image: imgData</span><br><span class="line">&#125;;</span><br><span class="line">let header = &#123;</span><br><span class="line">&apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;  //请求头设置成固定值</span><br><span class="line">&#125;;</span><br><span class="line">network.request(&apos;https://aip.baidubce.com/rest/2.0/ocr/v1/license_plate&apos;, params, header, &quot;POST&quot;, res =&gt; &#123;</span><br><span class="line">callback(res);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: &quot;请对准车牌重新拍照&quot;,</span><br><span class="line">icon: &quot;none&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;, &quot;识别中...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要参数都没有问题，那么接下来就能得到返回结果，返回车牌信息（车牌号、车牌颜色等等）。<br>调用其他场景的图片识别API同理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为业务需求，有车牌识别的功能，所以上网找了图片识别的解决方案，发现BAT都有，但是百度的免费次数最多，对业务来说就相当于全免费了，所以就选择了百度的API，😄。官方文档地址：&lt;a href=&quot;https://ai.baidu.com/docs#/OCR-API/top。
      
    
    </summary>
    
      <category term="前端" scheme="https://flttx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="H5 APP" scheme="https://flttx.github.io/tags/H5-APP/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序省市区三级联动优化版</title>
    <link href="https://flttx.github.io/2019/07/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8%E4%BC%98%E5%8C%96%E7%89%88/"/>
    <id>https://flttx.github.io/2019/07/16/微信小程序省市区三级联动优化版/</id>
    <published>2019-07-16T06:22:24.000Z</published>
    <updated>2019-07-16T06:49:01.175Z</updated>
    
    <content type="html"><![CDATA[<p>优化版的省市区选择器，更简化的Js数据，方便输出以及读取显示。js地址：<a href="https://hexo-ocean.oss-cn-shanghai.aliyuncs.com/post/js/cityData.js" target="_blank" rel="noopener">城市数据js</a>。</p><p>页面组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;picker mode=&quot;multiSelector&quot; bindchange=&quot;bindMultiPickerChange&quot; bindcolumnchange=&quot;bindMultiPickerColumnChange&quot; </span><br><span class="line">value=&quot;&#123;&#123;citiesIndex&#125;&#125;&quot; range=&quot;&#123;&#123;cityArray&#125;&#125;&quot; range-key=&quot;name&quot;&gt;</span><br><span class="line">  &lt;/picker&gt;</span><br></pre></td></tr></table></figure><p>js优化后无需放服务器请求，放本地即可。</p><h1 id="1-加载城市数据"><a href="#1-加载城市数据" class="headerlink" title="1.加载城市数据"></a>1.加载城市数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var array = require(&apos;../../../utils/cityData.js&apos;).cityData;</span><br></pre></td></tr></table></figure><h1 id="2-选择器数据初始化"><a href="#2-选择器数据初始化" class="headerlink" title="2.选择器数据初始化"></a>2.选择器数据初始化</h1><p>初始化选择器数据，默认都选中第一项。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">let cityArray = [</span><br><span class="line">    [],</span><br><span class="line">    [],</span><br><span class="line">    []</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">for (let x in array[&quot;86&quot;]) &#123; //存入省</span><br><span class="line">    cityArray[0].push(&#123;</span><br><span class="line">    name: array[&quot;86&quot;][x],</span><br><span class="line">    code: x</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let y in array[cityArray[0][0].code]) &#123; //存入市，默认关联第一个省</span><br><span class="line">    cityArray[1].push(&#123;</span><br><span class="line">        name: array[cityArray[0][0].code][y],</span><br><span class="line">        code: y</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (let z in array[cityArray[1][0].code]) &#123; //存入区，默认关联第一个省的第一个市</span><br><span class="line">    cityArray[2].push(&#123;</span><br><span class="line">        name: array[cityArray[1][0].code][z],</span><br><span class="line">        code: z</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">this.setData(&#123;</span><br><span class="line">    cityArray: cityArray</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-列滚动事件"><a href="#3-列滚动事件" class="headerlink" title="3.列滚动事件"></a>3.列滚动事件</h1><p>滚动选择器的列时相应的数据变化，这是最重要的点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">//列滚动事件</span><br><span class="line">  bindMultiPickerColumnChange(e) &#123;</span><br><span class="line">    let selectedIndex = e.detail.value;</span><br><span class="line"></span><br><span class="line">    let cityArray = this.data.cityArray;</span><br><span class="line">    let list1 = []; //存放第二列数据，即市的列</span><br><span class="line">    let list2 = []; //存放第三列数据，即区的列</span><br><span class="line"></span><br><span class="line">    let citiesIndex = [];</span><br><span class="line"></span><br><span class="line">    let pcode = &apos;&apos;, scode = &apos;&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    let provinceIndex = this.data.citiesIndex[0]; //选中的省索引</span><br><span class="line">    let cityIndex = this.data.citiesIndex[1]; //选中的市索引 </span><br><span class="line">    let areaIndex = this.data.citiesIndex[2]; //选中的区索引</span><br><span class="line"></span><br><span class="line">    switch (e.detail.column) &#123;</span><br><span class="line">      case 0: //滚动第一列</span><br><span class="line">        pcode = cityArray[0][selectedIndex].code;</span><br><span class="line">        for(let x in array[pcode])&#123;</span><br><span class="line">          list1.push(&#123;</span><br><span class="line">            name: array[pcode][x],</span><br><span class="line">            code: x</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scode = list1[0].code;</span><br><span class="line">        for(let y in array[scode])&#123;</span><br><span class="line">          list2.push(&#123;</span><br><span class="line">            name: array[scode][y],</span><br><span class="line">            code: y</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        citiesIndex = [selectedIndex, 0, 0, 0];</span><br><span class="line">        break;</span><br><span class="line">      case 1: //滚动第二列</span><br><span class="line">        list1 = cityArray[1];</span><br><span class="line"></span><br><span class="line">        scode = list1[selectedIndex].code;</span><br><span class="line">        for(let x in array[scode])&#123;</span><br><span class="line">          list2.push(&#123;</span><br><span class="line">            name: array[scode][x],</span><br><span class="line">            code: x</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        citiesIndex = [provinceIndex, selectedIndex, 0, 0];</span><br><span class="line">        break;</span><br><span class="line">      case 2: //滚动第三列</span><br><span class="line">        list1 = cityArray[1];</span><br><span class="line">        list2 = cityArray[2];</span><br><span class="line"></span><br><span class="line">        citiesIndex = [provinceIndex, cityIndex, selectedIndex, 0];</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [`cityArray[1]`]: list1, //重新赋值第二列数组，即联动了市</span><br><span class="line">      [`cityArray[2]`]: list2, //重新赋值第三列数组，即联动了区</span><br><span class="line">      citiesIndex: citiesIndex, //更新索引</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="4-选择器变更事件"><a href="#4-选择器变更事件" class="headerlink" title="4.选择器变更事件"></a>4.选择器变更事件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//选择器选择事件</span><br><span class="line">  bindMultiPickerChange(e) &#123;</span><br><span class="line">    let cityIndex = e.detail.value; </span><br><span class="line">    let cityArray = this.data.cityArray;</span><br><span class="line"></span><br><span class="line">    let province = cityArray[0][cityIndex[0]].name;</span><br><span class="line">    let city = cityArray[1][cityIndex[1]].name;</span><br><span class="line">    let district = cityArray[2][cityIndex[2]].name;</span><br><span class="line">    //选择的地址编码</span><br><span class="line">    let areaCode = cityArray[2][cityIndex[2]].code;</span><br><span class="line">    //选择的地址文本</span><br><span class="line">    let selectedAddress = &quot;&quot;;</span><br><span class="line">   </span><br><span class="line">    selectedAddress = province + city + district;</span><br><span class="line"></span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      region: selectedAddress,</span><br><span class="line">      areaCode: areaCode,</span><br><span class="line">      provinceCode: cityArray[0][cityIndex[0]].code,</span><br><span class="line">      cityCode: cityArray[1][cityIndex[1]].code</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h1 id="5-根据传过来的值显示省市区"><a href="#5-根据传过来的值显示省市区" class="headerlink" title="5.根据传过来的值显示省市区"></a>5.根据传过来的值显示省市区</h1><p>修改初始化选择器方法，判断当修改地址时读取显示已选择的省市区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">for (let x in array[&quot;86&quot;]) &#123; //存入省</span><br><span class="line">    cityArray[0].push(&#123;</span><br><span class="line">    name: array[&quot;86&quot;][x],</span><br><span class="line">    code: x</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(this.data.address_id != &quot;&quot;)&#123; //编辑地址，根据传过来的地址文本和编码调整选择器</span><br><span class="line">    for (let y in array[provinceCode]) &#123;</span><br><span class="line">        cityArray[1].push(&#123;</span><br><span class="line">            name: array[provinceCode][y],</span><br><span class="line">            code: y</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (let z in array[cityCode]) &#123;</span><br><span class="line">        cityArray[2].push(&#123;</span><br><span class="line">            name: array[cityCode][z],</span><br><span class="line">            code: z</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let i = 0,len = cityArray[0].length;i&lt;len;i++)&#123;</span><br><span class="line">        if (cityArray[0][i].code == provinceCode) &#123;</span><br><span class="line">            provinceIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let j = 0, len = cityArray[1].length; j &lt; len; j++) &#123;</span><br><span class="line">        if (cityArray[1][j].code == cityCode) &#123;</span><br><span class="line">            cityIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (let k = 0, len = cityArray[2].length; k &lt; len; k++) &#123;</span><br><span class="line">        if (cityArray[2][k].code == areaCode) &#123;</span><br><span class="line">            districtIndex = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; else &#123; //添加地址</span><br></pre></td></tr></table></figure><hr><h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><p><img src="https://hexo-ocean.oss-cn-shanghai.aliyuncs.com/post/1558583329%281%29.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;优化版的省市区选择器，更简化的Js数据，方便输出以及读取显示。js地址：&lt;a href=&quot;https://hexo-ocean.oss-cn-shanghai.aliyuncs.com/post/js/cityData.js&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="前端" scheme="https://flttx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://flttx.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序长按数量自动加减</title>
    <link href="https://flttx.github.io/2019/05/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%95%BF%E6%8C%89%E6%95%B0%E9%87%8F%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%87%8F/"/>
    <id>https://flttx.github.io/2019/05/28/微信小程序长按数量自动加减/</id>
    <published>2019-05-28T08:18:29.000Z</published>
    <updated>2019-05-28T08:59:44.374Z</updated>
    
    <content type="html"><![CDATA[<p>开发一个微信小程序，有购物车的功能，在测试加减购物车中商品数量时，发现点一下加一或减一太烦，于是添加了长按自动加减的功能。</p><p>页面组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"minus"</span> <span class="attr">catchtouchstart</span>=<span class="string">'startMinus'</span> <span class="attr">catchtouchend</span>=<span class="string">'endMinus'</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">data-goodIndex</span>=<span class="string">"&#123;&#123;goodIndex&#125;&#125;"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">text</span>&gt;</span> </span><br><span class="line">&#123;&#123;good.num&#125;&#125;     <span class="comment">&lt;!-- 商品数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"add"</span> <span class="attr">catchtouchstart</span>=<span class="string">'startAdd'</span> <span class="attr">catchtouchend</span>=<span class="string">'endAdd'</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">data-goodIndex</span>=<span class="string">"&#123;&#123;goodIndex&#125;&#125;"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-监听触摸开始事件"><a href="#1-监听触摸开始事件" class="headerlink" title="1.监听触摸开始事件"></a>1.监听触摸开始事件</h3><p>首先监听触摸开始事件touchstart，记录触摸开始时间，时间后面有用。需要用到定时器，timer用的是页面全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按住加号不停地加</span></span><br><span class="line">startAdd(e)&#123;</span><br><span class="line">    startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();  <span class="comment">//记录触摸开始时间</span></span><br><span class="line">    <span class="keyword">let</span> index = e.currentTarget.dataset.index;</span><br><span class="line">    <span class="keyword">let</span> goodIndex = e.currentTarget.dataset.goodindex;</span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;  <span class="comment">//定义定时器</span></span><br><span class="line">        <span class="keyword">this</span>.data.cartList[index].goodList[goodIndex].num++;</span><br><span class="line">        <span class="keyword">let</span> sumPrice = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.data.cartList.map(<span class="function">(<span class="params">type, index</span>) =&gt;</span> &#123;</span><br><span class="line">        type.goodList.map(<span class="function">(<span class="params">good, index</span>) =&gt;</span> &#123;</span><br><span class="line">            count += good.num;  <span class="comment">//计算商品数量</span></span><br><span class="line">            <span class="keyword">if</span> (good.selected) &#123;  <span class="comment">//计算选中商品价格</span></span><br><span class="line">            sumPrice += good.price * good.num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            [<span class="string">`cartList[<span class="subst">$&#123;index&#125;</span>].goodList[<span class="subst">$&#123;goodIndex&#125;</span>]`</span>]: <span class="keyword">this</span>.data.cartList[index].goodList[goodIndex],  <span class="comment">//购物车列表内容局部刷新</span></span><br><span class="line">            goodSumPrice: sumPrice,</span><br><span class="line">            cartNum: count &gt; <span class="number">99</span> ? <span class="string">'99+'</span> : count</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-监听触摸结束事件"><a href="#2-监听触摸结束事件" class="headerlink" title="2.监听触摸结束事件"></a>2.监听触摸结束事件</h3><p>触摸结束，则结束数量加减，清除定时器。记录结束时间，和开始时间比较，根据微信小程序官方文档定义：手指触摸后，超过350ms再离开为长按。反之则认为是点击，执行点击的逻辑，即数量加一。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结束加</span></span><br><span class="line">endAdd(e)&#123;</span><br><span class="line">    endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">//记录结束时间</span></span><br><span class="line">    <span class="keyword">if</span>((endTime - startTime) &lt; <span class="number">350000</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.clickAdd(e);</span><br><span class="line">    &#125; </span><br><span class="line">    clearInterval(timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击事件逻辑：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击加号</span></span><br><span class="line">clickAdd(e)&#123;</span><br><span class="line">  <span class="keyword">let</span> index = e.currentTarget.dataset.index;</span><br><span class="line">  <span class="keyword">let</span> goodIndex = e.currentTarget.dataset.goodindex;</span><br><span class="line">  <span class="keyword">this</span>.data.cartList[index].goodList[goodIndex].num ++;</span><br><span class="line">  <span class="keyword">let</span> sumPrice = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.data.cartList.map(<span class="function">(<span class="params">type, index</span>) =&gt;</span> &#123;</span><br><span class="line">    type.goodList.map(<span class="function">(<span class="params">good, index</span>) =&gt;</span> &#123;</span><br><span class="line">      count += good.num;</span><br><span class="line">      <span class="keyword">if</span> (good.selected) &#123;</span><br><span class="line">        sumPrice += good.price * good.num;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      [<span class="string">`cartList[<span class="subst">$&#123;index&#125;</span>].goodList[<span class="subst">$&#123;goodIndex&#125;</span>]`</span>]: <span class="keyword">this</span>.data.cartList[index].goodList[goodIndex],</span><br><span class="line">      goodSumPrice: sumPrice,</span><br><span class="line">      cartNum: count&gt;<span class="number">99</span>?<span class="string">'99+'</span>:count</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之所以要判断是长按还是点击是因为在标签元素上定义了触摸开始事件后，tap事件就不再触发，所以需要手动调用点击方法。</p><p>减号同理，需要注意数量减到0时的操作，我的逻辑是长按数量减到一就停止，再点击减号则删除该商品。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://hexo-ocean.oss-cn-shanghai.aliyuncs.com/post/pj1sd-gfr7w.gif" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发一个微信小程序，有购物车的功能，在测试加减购物车中商品数量时，发现点一下加一或减一太烦，于是添加了长按自动加减的功能。&lt;/p&gt;
&lt;p&gt;页面组件&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="前端" scheme="https://flttx.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信小程序" scheme="https://flttx.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
